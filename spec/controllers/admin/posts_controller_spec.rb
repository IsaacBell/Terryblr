require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe Admin::Terryblr::PostsController do

  before(:each) do
    @request.env["devise.mapping"] = Devise.mappings[:admin]
    sign_in Factory.create(:user_admin)
  end

  describe "GET index" do
    before do
      Factory(:drafted_post, :created_at => 1.month.ago)
      Factory(:drafted_post)
      Factory(:published_post)
      Factory(:published_post)
    end

    it "assigns all published posts as @posts" do
      get :index
      assigns(:posts).all? { |post| post.published?.should be true }
    end

    describe "drafted posts" do
      before do
        get :index, :state => "drafted", :month => Date.today.month, :year => Date.today.year
      end

      it "assigns only drafted posts as @posts" do
        assigns(:posts).empty?.should_not be true
        assigns(:posts).all? { |post| post.drafted?.should be true }
      end
    end
  end

#   describe "GET new" do
#     it "assigns a new post as @post" do
#       Terryblr::Post.stub(:new) { mock_post }
#       get :new
#       assigns(:post).should be(mock_post)
#     end
#   end
# 
#   describe "GET edit" do
#     it "assigns the requested post as @post" do
#       Terryblr::Post.stub(:find).with("37") { mock_post }
#       get :edit, :id => "37"
#       assigns(:post).should be(mock_post)
#     end
#   end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created post as @post" do
        post :create, :post => Factory.attributes_for(:drafted_post)
        assigns(:post).valid?.should be true
      end
      
      describe "with valid photos params" do
        it "assigns a newly created post as @post with a photo" do
          photo = Factory(:photo) # Fake uploaded photo
          params = Factory.attributes_for(:drafted_post).
            merge(:photo_ids => [photo.id]). # Photo to be associated with the post
            merge(:photos_attributes => [photo.attributes.select{|a| %w(caption id display_order).include?(a)}]) # nested Photos attributes
          post :create, :post => params
          assigns(:post).photos.should eq [photo]
        end

        it "assigns a newly created post as @post with many photos" do
          photos = [Factory(:photo), Factory(:photo)] # Fake uploaded photo
          post :create, :post => Factory.attributes_for(:drafted_post).
            merge(:photo_ids => photos.map(&:id)). # Photos to be associated with the post
            merge(:photos_attributes => photos.map{ |p| p.attributes.select{|a| %w(caption id display_order).include?(a)} }) # nested Photos attributes
          assigns(:post).photo_ids.should eq photos.map(&:id)
        end
      end
    end
  end

  describe "PUT update" do
    describe "with valid post params" do
      it "assigns a updated post as @post" do
        drafted = Factory(:drafted_post)
        put :update, :id => drafted.id, :post => { :body => "Updated body" }
        assigns(:post).valid?.should be true
      end
      
      describe "with valid post params and photos" do
        before do
          published_post = Factory(:published_post)
          published_post.photos << Factory(:photo) # Fake uploaded photo
        end
        
        it "assigns an updated post as @post with a new photo" do
        end
        
        it "assigns an updated post as @post with many new photos" do
        end
      end
    end
  end

# 
#   describe "DELETE destroy" do
#     it "destroys the requested post" do
#       Terryblr::Post.stub(:find).with("37") { mock_post }
#       mock_post.should_receive(:destroy)
#       delete :destroy, :id => "37"
#     end
# 
#     it "redirects to the posts list" do
#       Terryblr::Post.stub(:find) { mock_post }
#       delete :destroy, :id => "1"
#       response.should redirect_to(admin_posts_url)
#     end
#   end
end
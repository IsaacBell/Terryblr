require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe Admin::Terryblr::PostsController do

  before(:each) do
    @request.env["devise.mapping"] = Devise.mappings[:admin]
    sign_in Factory.create(:admin)
  end

  describe "GET index" do
    before do
      Factory(:drafted_post, :created_at => 1.month.ago)
      Factory(:drafted_post)
      Factory(:published_post)
      Factory(:published_post)
    end

    it "assigns all published posts as @posts" do
      get :index
      assigns(:posts).all? { |post| post.published?.should be true }
    end

    describe "drafted posts" do
      before do
        get :index, :state => "drafted", :month => Date.today.month, :year => Date.today.year
      end

      it "should assigns only drafted posts as @posts" do
        assigns(:posts).empty?.should_not be true
        assigns(:posts).all? { |post| post.drafted?.should be true }
      end
    end
  end

#   describe "GET new" do
#     it "assigns a new post as @post" do
#       Terryblr::Post.stub(:new) { mock_post }
#       get :new
#       assigns(:post).should be(mock_post)
#     end
#   end
# 
#   describe "GET edit" do
#     it "assigns the requested post as @post" do
#       Terryblr::Post.stub(:find).with("37") { mock_post }
#       get :edit, :id => "37"
#       assigns(:post).should be(mock_post)
#     end
#   end
# 
#   describe "POST create" do
#     describe "with valid params" do
#       it "assigns a newly created post as @post" do
#         Terryblr::Post.stub(:new).with({'these' => 'params'}) { mock_post(:save => true) }
#         post :create, :post => {'these' => 'params'}
#         assigns(:post).should be(mock_post)
#       end
# 
#       it "redirects to the created post" do
#         Terryblr::Post.stub(:new) { mock_post(:save => true) }
#         post :create, :post => {}
#         response.should redirect_to(admin_post_url(mock_post))
#       end
#     end
# 
#     describe "with invalid params" do
#       it "assigns a newly created but unsaved post as @post" do
#         Terryblr::Post.stub(:new).with({'these' => 'params'}) { mock_post(:save => false) }
#         post :create, :post => {'these' => 'params'}
#         assigns(:post).should be(mock_post)
#       end
# 
#       it "re-renders the 'new' template" do
#         Terryblr::Post.stub(:new) { mock_post(:save => false) }
#         post :create, :post => {}
#         response.should render_template("new")
#       end
#     end
#   end
# 
#   describe "PUT update" do
#     describe "with valid params" do
#       it "updates the requested post" do
#         Terryblr::Post.stub(:find).with("37") { mock_post }
#         mock_post.should_receive(:update_attributes).with({'these' => 'params'})
#         put :update, :id => "37", :post => {'these' => 'params'}
#       end
# 
#       it "assigns the requested post as @post" do
#         Terryblr::Post.stub(:find) { mock_post(:update_attributes => true) }
#         put :update, :id => "1"
#         assigns(:post).should be(mock_post)
#       end
# 
#       it "redirects to the post" do
#         Terryblr::Post.stub(:find) { mock_post(:update_attributes => true) }
#         put :update, :id => "1"
#         response.should redirect_to(admin_post_url(mock_post))
#       end
#     end
# 
#     describe "with invalid params" do
#       it "assigns the post as @post" do
#         Terryblr::Post.stub(:find) { mock_post(:update_attributes => false) }
#         put :update, :id => "1"
#         assigns(:post).should be(mock_post)
#       end
# 
#       it "re-renders the 'edit' template" do
#         Terryblr::Post.stub(:find) { mock_post(:update_attributes => false) }
#         put :update, :id => "1"
#         response.should render_template("edit")
#       end
#     end
#   end
# 
#   describe "DELETE destroy" do
#     it "destroys the requested post" do
#       Terryblr::Post.stub(:find).with("37") { mock_post }
#       mock_post.should_receive(:destroy)
#       delete :destroy, :id => "37"
#     end
# 
#     it "redirects to the posts list" do
#       Terryblr::Post.stub(:find) { mock_post }
#       delete :destroy, :id => "1"
#       response.should redirect_to(admin_posts_url)
#     end
#   end
end